{
	"error": {
		"commands": {
			"build": {
				"invalidNetwork": "Invalid network: {network}. Must be one of: {validNetworks}",
				"failedReadingOutputJson": "Failed to read output JSON file: {file}",
				"contractProcessingFailed": "Failed to process contract: {file}",
				"mkdirFailed": "Failed to create output directory: {dir}",
				"buildFailed": "Build failed on platform {platform} for file {file}",
				"sdkNotInstalled": "The {platform} SDK is not installed. Please install it first."
			},
			"deploy": {
				"environmentNotFound": "IOTA CLI environment \"{network}\" not found. Please configure it first.",
				"environmentSwitchFailed": "Failed to switch to {network} environment. Active environment: {activeEnv}",
				"environmentOperationFailed": "Failed to {operation} {network} environment. Make sure IOTA CLI is configured with this environment.",
				"noContractsFound": "No contracts found for network: {network}",
				"envFileLoadFailed": "Failed to load environment file: {envFilePath}",
				"networkConfigInvalid": "Invalid network configuration",
				"networkMismatch": "Network mismatch",
				"rpcUrlRequired": "Missing required RPC_URL environment variable. Set RPC_URL in your environment or use --load-env to load from configuration file (e.g., configs/{network}.env).",
				"gasBudgetRequired": "Missing required GAS_BUDGET environment variable. Set GAS_BUDGET in your environment or use --load-env to load from configuration file (e.g., configs/{network}.env).",
				"invalidContractsFile": "Invalid contracts file: must contain an object",
				"contractsLoadFailed": "Failed to load compiled contracts",
				"insufficientBalance": "Insufficient wallet balance for deployment",
				"deploymentEnvironmentCheckFailed": "Deployment environment validation failed",
				"addressNotFound": "Could not find address at index {addressIndex}",
				"balanceCheckFailed": "Failed to get wallet balance",
				"deploymentFailed": "Contract deployment failed",
				"packageIdNotFound": "Could not find package ID in deployment result",
				"contractsFileUpdateFailed": "Failed to update contracts file",
				"invalidJsonResponse": "Invalid JSON response from IOTA CLI",
				"unexpectedResponseFormat": "Unexpected response format from IOTA CLI: {message}",
				"invalidCoinObject": "Invalid coin object at index {index}: {actualType}",
				"invalidCoinBalance": "Invalid coin balance at index {index}: {balance}",
				"contractDataNotFound": "Contract data not found for network {network}. Available networks: {availableNetworks}",
				"noPackageData": "No package data found for contract in compiled modules",
				"packageNotFoundOnNetwork": "Package {packageId} not found on network {network}. Please ensure the package is deployed.",
				"dryRunInvalidConfig": "Dry run failed due to invalid configuration",
				"noMoveTomlFilesFound": "No Move.toml files found in current directory or subdirectories. Make sure you're running this from a directory containing Move projects."
			}
		},
		"envSetup": {
			"envFileLoadFailed": "Failed to load environment file: {envFilePath}",
			"mnemonicMissing": "Missing required DEPLOYER_MNEMONIC environment variable for {network}. Set DEPLOYER_MNEMONIC in your environment or use --load-env to load from configuration file (e.g., configs/{network}.env).\n\nYou can generate a mnemonic using:\nnpx \"@twin.org/wallet-cli\" mnemonic --env wallet.env\n\nThen add the MNEMONIC value to your configs/{network}.env file:\n{mnemonicVar}=\"word1 word2 word3 ... word24\"\n\nSee configs/{network}.env.example for reference.",
			"mnemonicInvalidFormat": "Invalid DEPLOYER_MNEMONIC environment variable format for {network}. Expected 24 words, got {wordCount}.\nPlease ensure {mnemonicVar} in your environment or configs/{network}.env contains a valid 24-word mnemonic phrase.",
			"mnemonicValidationFailed": "Mnemonic validation failed",
			"seedInvalidFormat": "Invalid DEPLOYER_SEED environment variable format for {network}. Expected hex string starting with 0x and at least 64 characters.\nPlease ensure {seedVar} in your environment or configs/{network}.env contains a valid hex seed value."
		}
	},
	"commands": {
		"build": {
			"summary": "Compile Move contracts for specified network and generate network-aware JSON structure",
			"description": "Compiles Move smart contracts using the IOTA CLI and generates a network-aware JSON structure containing compiled bytecode modules.",
			"options": {
				"inputGlob": {
					"description": "A glob pattern that matches one or more Move files"
				},
				"network": {
					"param": "--network '<'network'>'",
					"description": "Target network (testnet/devnet/mainnet)"
				},
				"output": {
					"param": "--output '<'file'>'",
					"description": "Output file for compiled modules JSON"
				}
			},
			"labels": {
				"inputGlob": "Input Glob",
				"outputJson": "Output JSON",
				"network": "Network",
				"platform": "Platform",
				"matchedFilesCount": "Matched Files Count",
				"contractName": "Contract Name",
				"compileCommand": "Compile Command",
				"workingDirectory": "Working Directory",
				"compileResult": "Compile Result",
				"computedPackageId": "Computed Package ID",
				"mergingWithExistingJson": "Merging with existing JSON",
				"noExistingJsonFound": "No existing JSON found",
				"creatingNewJsonStructure": "Creating new JSON structure"
			},
			"progress": {
				"searchingFiles": "Searching for Move files...",
				"preparingBuildEnvironment": "Preparing build environment...",
				"processingMoveFile": "Processing Move file",
				"writingJsonFile": "Writing JSON file..."
			},
			"section": {
				"checkingIotaSDK": "Checking IOTA SDK...",
				"buildingMoveContracts": "Building Move Contracts for {network}"
			},
			"warnings": {
				"noMoveFilesFound": "No Move files found for pattern: {inputGlob}",
				"noBytecodeModulesFolder": "No bytecode_modules folder found for contract: {contractName}",
				"noMvFilesFound": "No .mv files found for contract: {contractName}"
			}
		},
		"deploy": {
			"summary": "Deploy compiled contracts to the specified network",
			"description": "Deploys previously compiled Move contracts to the specified IOTA network using the configured environment.",
			"options": {
				"contracts": {
					"param": "--contracts '<'path'>'",
					"description": "Path to compiled contracts file"
				},
				"network": {
					"param": "-n, --network '<'network'>'",
					"description": "Target network (testnet, devnet, mainnet)"
				},
				"dryRun": {
					"param": "--dry-run",
					"description": "Perform a dry run without actual deployment"
				},
				"force": {
					"param": "-f, --force",
					"description": "Force redeployment even if already deployed"
				}
			},
			"labels": {
				"contractsFile": "Contracts File",
				"network": "Network",
				"dryRunMode": "Dry Run Mode",
				"forceMode": "Force Mode",
				"deployedPackageId": "Deployed Package ID",
				"upgradeCap": "Upgrade Cap",
				"gasUsed": "Gas Used",
				"deploymentStatus": "Deployment Status",
				"iotaEnvironmentCheck": "IOTA environment check",
				"switchedIotaEnvironment": "Switched IOTA environment",
				"contractAlreadyDeployed": "Contract already deployed",
				"dryRunWouldDeploy": "DRY RUN: Would deploy contract",
				"dryRunPackageId": "DRY RUN: Package ID",
				"dryRunGasBudget": "DRY RUN: Gas Budget",
				"dryRunRpcUrl": "DRY RUN: RPC URL",
				"dryRunWalletAddress": "DRY RUN: Wallet Address",
				"dryRunWalletBalance": "DRY RUN: Wallet Balance",
				"dryRunRequiredBalance": "DRY RUN: Required Balance",
				"dryRunBalanceStatus": "DRY RUN: Balance Status",
				"walletAddress": "Wallet Address",
				"walletBalance": "Wallet Balance",
				"deployedPackageIdResult": "Deployed Package ID",
				"upgradeCapId": "UpgradeCap ID",
				"moveProjectRoot": "Move Project Root",
				"publishCommand": "Publish Command",
				"workingDirectory": "Working Directory",
				"updatedContractsFile": "Updated contracts file",
				"warning": "⚠️  WARNING",
				"insufficientBalanceWarning": "Insufficient balance: {currentBalance} IOTA < {requiredBalance} IOTA",
				"environmentValidationWarning": "Environment validation failed: {message}",
				"gasBudget": "Gas Budget",
				"requiredBalance": "Required Balance",
				"balanceStatus": "Balance Status",
				"faucetFundsRequested": "Faucet funds requested",
				"faucetRequestFailed": "Faucet request failed for {network}: {error}",
				"insufficientBalanceAfterFaucet": "Insufficient balance after faucet request on {network}: {balance} IOTA < {required} IOTA for wallet {walletAddress}. Attempting deployment anyway."
			},
			"progress": {
				"loadingContracts": "Loading compiled contracts...",
				"checkingEnvironment": "Checking IOTA CLI environment...",
				"settingEnvironment": "Setting IOTA CLI environment...",
				"deployingContract": "Deploying contract: {contractName} ({network})",
				"updatingContractsFile": "Updating contracts file...",
				"requestingFaucetFunds": "Requesting funds from {network} faucet..."
			},
			"messages": {},
			"section": {
				"deploymentConfiguration": "Deployment Configuration",
				"deploymentResults": "Deployment Results",
				"deployContracts": "Deploy Contracts"
			}
		}
	}
}
